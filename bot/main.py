import telebot as tb

import mysql.connector
from mysql.connector import Error

from dotenv import load_dotenv

import hashlib
import os


load_dotenv()

bot = tb.TeleBot(os.getenv('TOKEN'))

sessions = {}

db_config = {
    'host': os.getenv('DB_HOST'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}


phrases = {
    'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ To-Do –±–æ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',

    'signin': '–í–æ–π—Ç–∏',
    'signin_success': '–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏!',
    'signin_unsuccess': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!',
    'signin_error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ!',

    'signup': '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
    'signup_username': '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω:',
    'signup_password': '–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:',
    'signup_success': '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!',
    'signup_login_exists': '–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
    'signup_error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!',

    'enter_username': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:',
    'enter_password': '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å',

    'auth_please': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É',

    'menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
    'items:': 'üìã –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n',
    'get_items': 'üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏',
    'get_items_no_one': '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫',
    'get_items_error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫',

    'create_item': '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É',
    'create_item_text': '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:',
    'create_item_success': '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
    'create_item_unsuccess': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏!',

    'edit_item': 'üñä –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É',
    'edit_item_number': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:',
    'edit_item_text': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:',
    'edit_item_success': '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
    'edit_item_unsuccess': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏!',
    'edit_item_no_number': '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
    'edit_item_no_such': '‚ùå –ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç!',
    'edit_item_error': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–º–µ—Ç–∫–∏!',

    'delete_item': '‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É',
    'delete_item_number': '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏:',
    'delete_item_success': '‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
    'delete_item_unsuccess': '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏!',
    'delete_item_no_number': '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',

    'signout': 'üîê –í—ã–π—Ç–∏',
    'signout_success': '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'
}


def get_db_connection():
    try:
        return mysql.connector.connect(**db_config)
    except Error as error:
        raise error


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = tb.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(phrases['signin'], phrases['signup'])

    bot.send_message(message.chat.id, phrases['welcome'], reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == phrases['signin'])
def login_handler(message):
    message = bot.send_message(message.chat.id, phrases['enter_username'])

    bot.register_next_step_handler(message, process_username_step)


def process_username_step(message):
    username = message.text
    message = bot.send_message(message.chat.id, phrases['enter_password'])

    bot.register_next_step_handler(message, process_password_step, username)


def process_password_step(message, username):
    password = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute(f'SELECT id, passhash FROM accounts WHERE username = "{username}"')
        user = cursor.fetchone()
        
        if user and user['passhash'] == hash_password(password):
            sessions[message.chat.id] = user['id']

            bot.send_message(message.chat.id, phrases['signin_success'])
            show_main_menu(message.chat.id)
        else:
            bot.send_message(message.chat.id, phrases['signin_unsuccess'])
        
    except Error as error:
        bot.send_message(message.chat.id, phrases['signin_error'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == phrases['signup'])
def register_handler(message):
    message = bot.send_message(message.chat.id, phrases['signup_username'])

    bot.register_next_step_handler(message, process_reg_username_step)


def process_reg_username_step(message):
    username = message.text
    message = bot.send_message(message.chat.id, phrases['signup_password'])

    bot.register_next_step_handler(message, process_reg_password_step, username)


def process_reg_password_step(message, username):
    password = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        
        cursor.execute(f'INSERT INTO accounts (username, passhash) VALUES ("{username}", "{hash_password(password)}")')

        user_id = cursor.lastrowid
        connection.commit()

        sessions[message.chat.id] = user_id

        bot.send_message(message.chat.id, phrases['signup_success'])
        show_main_menu(message.chat.id)

    except Error as error:
        if error.errno == 1062:
            bot.send_message(message.chat.id, phrases['signup_login_exists'])
        else:
            bot.send_message(message.chat.id, phrases['signup_error'])
            print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def show_main_menu(chat_id):
    markup = tb.types.ReplyKeyboardMarkup(resize_keyboard=True)

    markup.add(phrases['get_items'])
    markup.add(phrases['create_item'], phrases['edit_item'], phrases['delete_item'])
    markup.add(phrases['signout'])

    bot.send_message(chat_id, phrases['menu'], reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == phrases['get_items'])
def show_items(message):
    user_id = sessions.get(message.chat.id)

    if not user_id:
        bot.send_message(message.chat.id, phrases['auth_please'])
        return
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute(f'SELECT id, text FROM items WHERE user_id = "{user_id}"')
        items = cursor.fetchall()
        
        if not items:
            bot.send_message(message.chat.id, phrases['get_items_no_one'])
            return
        
        response = phrases['items:']
        for item in items:
            response += f"{item['id']}.\t{item['text']}\n\n"
        
        bot.send_message(message.chat.id, response)

    except Error as error:
        bot.send_message(message.chat.id, phrases['get_items_error'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == phrases['create_item'])
def add_item_start(message):
    user_id = sessions.get(message.chat.id)

    if not user_id:
        bot.send_message(message.chat.id, phrases['auth_please'])
        return
    
    message = bot.send_message(message.chat.id, phrases['create_item_text'])

    bot.register_next_step_handler(message, add_item_finish, user_id)


def add_item_finish(message, user_id):
    text = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        cursor.execute(f'INSERT INTO items (user_id, text) VALUES ("{user_id}", "{text}")')
        connection.commit()

        bot.send_message(message.chat.id, phrases['create_item_success'])

    except Error as error:
        bot.send_message(message.chat.id, phrases['create_item_unsuccess'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == phrases['edit_item'])
def edit_handler(message):
    user_id = sessions.get(message.chat.id)

    if not user_id:
        bot.send_message(message.chat.id, phrases['auth_please'])
        return
    
    message = bot.send_message(message.chat.id, phrases['edit_item_number'])

    bot.register_next_step_handler(message, process_edit_item_id, user_id)


def process_edit_item_id(message, user_id):
    try:
        item_id = int(message.text)
        
        connection = get_db_connection()
        cursor = connection.cursor(dictionary=True)

        cursor.execute(f'SELECT id FROM items WHERE id = "{item_id}" AND user_id = "{user_id}"')
        item = cursor.fetchone()
        
        if not item:
            bot.send_message(message.chat.id, phrases['edit_item_no_such'])
            return
        
        message = bot.send_message(message.chat.id, phrases['edit_item_text'])

        bot.register_next_step_handler(message, process_edit_item_text, user_id, item_id)
        
    except ValueError:
        bot.send_message(message.chat.id, phrases['edit_item_no_number'])

    except Error as error:
        bot.send_message(message.chat.id, phrases['edit_item_error'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


def process_edit_item_text(message, user_id, item_id):
    new_text = message.text
    
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        
        cursor.execute(f'UPDATE items SET text = "{new_text}" WHERE id = "{item_id}" AND user_id = "{user_id}"')
        connection.commit()
        
        bot.send_message(message.chat.id, phrases['edit_item_success'])

    except Error as error:
        bot.send_message(message.chat.id, phrases['edit_item_unsuccess'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == phrases['delete_item'])
def delete_item_start(message):
    user_id = sessions.get(message.chat.id)

    if not user_id:
        bot.send_message(message.chat.id, phrases['auth_please'])
        return
    
    message = bot.send_message(message.chat.id, phrases['delete_item_number'])

    bot.register_next_step_handler(message, delete_item_finish, user_id)


def delete_item_finish(message, user_id):   
    try:
        item_id = int(message.text)

        connection = get_db_connection()
        cursor = connection.cursor()

        cursor.execute(f'DELETE FROM items WHERE id = "{item_id}" AND user_id = "{user_id}"')
        connection.commit()

        bot.send_message(message.chat.id, phrases['delete_item_success'])

    except ValueError:
        bot.send_message(message.chat.id, phrases['delete_item_no_number'])

    except Error as error:
        bot.send_message(message.chat.id, phrases['delete_item_unsuccess'])
        print(error)

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


@bot.message_handler(func=lambda m: m.text == phrases['signout'])
def logout_handler(message):
    if message.chat.id in sessions:
        del sessions[message.chat.id]
    
    bot.send_message(message.chat.id, phrases['signout_success'])

    start_handler(message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
